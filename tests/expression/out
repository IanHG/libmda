export LIBMDA_COMPILER_SETTING="g++ -O3 -std=c++11" && cd ../../lib && make
make[1]: Entering directory `/home/banan/programming/libmda/lib'
make[1]: Nothing to be done for `all'.
make[1]: Leaving directory `/home/banan/programming/libmda/lib'
g++ -O3 -fexpensive-optimizations -Drestrict= -std=c++0x -o main main.cc   ../../lib/libmda.a
In file included from ../../interface.h:80:0,
                 from expression_test.h:6,
                 from main.cc:7:
../../expr/expression.h: In instantiation of ‘static libmda::Value_type<A> libmda::expr::op_add<L, R>::apply(const L&, const R&, const ints ...) [with ints = {long unsigned int}; L = libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >; R = libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >; libmda::Value_type<A> = double]’:
../../expr/expression.h:91:51:   required from ‘decltype (Op<L, R>::apply(declval<L>(), declval<R>(), libmda::expr::binary_expression::at::is ...)) libmda::expr::binary_expression<L, R, Op>::at(Is ...) const [with Is = {long unsigned int}; typename std::enable_if<libmda::util::detail::requesting_elem<libmda::expr::binary_expression<L, R, Op>::order, typename libmda::expr::traits<libmda::expr::binary_expression<L, R, Op> >::size_type, Is ...>::value, int>::type <anonymous> = 0; L = libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >; R = libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >; Op = libmda::expr::op_add; decltype (Op<L, R>::apply(declval<L>(), declval<R>(), libmda::expr::binary_expression::at::is ...)) = double]’
../../IMDA.h:168:35:   required from ‘decltype (declval<const B>().self().at(libmda::IMDAAccess<false, A>::at::is ...)) libmda::IMDAAccess<false, A>::at(const Is ...) const [with Is = {long unsigned int}; B = libmda::IMDADim<libmda::IMDASelf<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add>, libmda::expr::traits<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add> > > >; typename std::enable_if<libmda::util::detail::requesting_elem<libmda::IMDAAccess<false, A>::order, typename A::size_type, Is ...>::value, int>::type <anonymous> = 0; A = libmda::IMDADim<libmda::IMDASelf<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add>, libmda::expr::traits<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add> > > >; decltype (declval<const B>().self().at(libmda::IMDAAccess<false, A>::at::is ...)) = double]’
../../IMDA.h:238:17:   required from ‘void libmda::equal_functor::operator()(V&&, U&&, ints ...) const [with V = libmda::IMDAElemAssign<libmda::util::dimensions_nocheck, libmda::operators::expression_scalar_binary_operators<libmda::expr::op_scal_add, libmda::expr::op_scal_sub, libmda::expr::op_scal_mult, libmda::expr::op_scal_div, libmda::operators::expression_trigonometri_functions<libmda::expr::op_cos, libmda::expr::op_sin, libmda::operators::expression_unary_operators<libmda::expr::op_unary_plus, libmda::expr::op_unary_minus, libmda::operators::expression_binary_operators<libmda::expr::op_add, libmda::expr::op_sub, libmda::expr::op_mult, libmda::expr::op_div, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > > >&; U = const libmda::IMDAAccessComb<libmda::IMDAAccess<false, libmda::IMDADim<libmda::IMDASelf<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add>, libmda::expr::traits<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add> > > > > >&; ints = {long unsigned int}]’
../../util/for_loop_expand.h:94:23:   required from ‘static void libmda::util::for_each_elem_impl<N, N>::sub<V, U>::apply(F&&, V&&, U&& ..., ints ...) [with F = libmda::equal_functor; ints = {long unsigned int}; V = libmda::IMDAElemAssign<libmda::util::dimensions_nocheck, libmda::operators::expression_scalar_binary_operators<libmda::expr::op_scal_add, libmda::expr::op_scal_sub, libmda::expr::op_scal_mult, libmda::expr::op_scal_div, libmda::operators::expression_trigonometri_functions<libmda::expr::op_cos, libmda::expr::op_sin, libmda::operators::expression_unary_operators<libmda::expr::op_unary_plus, libmda::expr::op_unary_minus, libmda::operators::expression_binary_operators<libmda::expr::op_add, libmda::expr::op_sub, libmda::expr::op_mult, libmda::expr::op_div, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > > >&; U = {const libmda::IMDAAccessComb<libmda::IMDAAccess<false, libmda::IMDADim<libmda::IMDASelf<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add>, libmda::expr::traits<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add> > > > > >&}; N = libmda::meta::detail::loop_iterator_impl<libmda::meta::int_<1>, libmda::meta::int_<0>, libmda::meta::int_<1> >]’
../../util/for_loop_expand.h:81:70:   required from ‘static void libmda::util::for_each_elem_impl<N, M>::sub<V, U>::apply(F&&, V&&, U&& ..., ints ...) [with F = libmda::equal_functor; ints = {}; V = libmda::IMDAElemAssign<libmda::util::dimensions_nocheck, libmda::operators::expression_scalar_binary_operators<libmda::expr::op_scal_add, libmda::expr::op_scal_sub, libmda::expr::op_scal_mult, libmda::expr::op_scal_div, libmda::operators::expression_trigonometri_functions<libmda::expr::op_cos, libmda::expr::op_sin, libmda::operators::expression_unary_operators<libmda::expr::op_unary_plus, libmda::expr::op_unary_minus, libmda::operators::expression_binary_operators<libmda::expr::op_add, libmda::expr::op_sub, libmda::expr::op_mult, libmda::expr::op_div, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > > >&; U = {const libmda::IMDAAccessComb<libmda::IMDAAccess<false, libmda::IMDADim<libmda::IMDASelf<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add>, libmda::expr::traits<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add> > > > > >&}; N = libmda::meta::detail::loop_iterator_impl<libmda::meta::int_<0>, libmda::meta::int_<0>, libmda::meta::int_<1> >; M = libmda::meta::detail::loop_iterator_impl<libmda::meta::int_<1>, libmda::meta::int_<0>, libmda::meta::int_<1> >]’
../../util/for_loop_expand.h:108:69:   required from ‘void libmda::util::for_each_elem(F&&, V&&, U&& ...) [with F = libmda::equal_functor; V = libmda::IMDAElemAssign<libmda::util::dimensions_nocheck, libmda::operators::expression_scalar_binary_operators<libmda::expr::op_scal_add, libmda::expr::op_scal_sub, libmda::expr::op_scal_mult, libmda::expr::op_scal_div, libmda::operators::expression_trigonometri_functions<libmda::expr::op_cos, libmda::expr::op_sin, libmda::operators::expression_unary_operators<libmda::expr::op_unary_plus, libmda::expr::op_unary_minus, libmda::operators::expression_binary_operators<libmda::expr::op_add, libmda::expr::op_sub, libmda::expr::op_mult, libmda::expr::op_div, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > > >&; U = {const libmda::IMDAAccessComb<libmda::IMDAAccess<false, libmda::IMDADim<libmda::IMDASelf<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add>, libmda::expr::traits<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add> > > > > >&}]’
../../IMDA.h:266:52:   required from ‘libmda::IMDAElemAssign<dims_check, A>::type& libmda::IMDAElemAssign<dims_check, A>::operator=(const libmda::IMDAAccessComb<B>&) [with B = libmda::IMDAAccess<false, libmda::IMDADim<libmda::IMDASelf<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add>, libmda::expr::traits<libmda::expr::binary_expression<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >, libmda::expr::op_add> > > > >; dims_check = libmda::util::dimensions_nocheck; A = libmda::operators::expression_scalar_binary_operators<libmda::expr::op_scal_add, libmda::expr::op_scal_sub, libmda::expr::op_scal_mult, libmda::expr::op_scal_div, libmda::operators::expression_trigonometri_functions<libmda::expr::op_cos, libmda::expr::op_sin, libmda::operators::expression_unary_operators<libmda::expr::op_unary_plus, libmda::expr::op_unary_minus, libmda::operators::expression_binary_operators<libmda::expr::op_add, libmda::expr::op_sub, libmda::expr::op_mult, libmda::expr::op_div, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check> > > > > > > > > > > > > >; libmda::IMDAElemAssign<dims_check, A>::type = midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>]’
expression_test.h:451:13:   required from ‘void libmda::tests::expression::vec_complex_float_test<vector_type, complex_vector_type, <anonymous>, <anonymous> >::do_test() [with vector_type = midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>; complex_vector_type = midas::mmv::SDArray1D<std::complex<double>, std::allocator<std::complex<double> >, libmda::testing::index_test_check>; typename std::enable_if<(typename std::remove_const<typename std::remove_reference< <template-parameter-1-1> >::type>::type:: order == 1), int>::type <anonymous> = 0; typename std::enable_if<(typename std::remove_const<typename std::remove_reference<_To>::type>::type:: order == 1), int>::type <anonymous> = 0]’
main.cc:68:1:   required from here
../../expr/expression.h:231:45: error: cannot convert ‘std::complex<double>’ to ‘libmda::Value_type<libmda::operators::libmda_addable<libmda::expr::op_add, libmda::expr::binary_expression, libmda::operators::libmda_subtractable<libmda::expr::op_sub, libmda::expr::binary_expression, libmda::operators::libmda_multiplicable<libmda::expr::op_mult, libmda::expr::binary_expression, libmda::operators::libmda_divisable<libmda::expr::op_div, libmda::expr::binary_expression, libmda::expr::expression_base<libmda::char_expr::char_expression_interface<libmda::IMDAVecAccessComb<libmda::IMDAVecAccess<true, libmda::IMDAAccessComb<libmda::IMDAAccess<true, libmda::IMDADim<libmda::IMDASelf<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check>, testing_traits::traits<midas::mmv::SDArray1D<double, std::allocator<double>, libmda::testing::index_test_check> > > > > > > > > > > > > > > {aka double}’ in return
       return a_lhs.at(i...) OP a_rhs.at(i...); \
                                             ^
../../expr/expression.h:255:1: note: in expansion of macro ‘LIBMDA_CREATE_DEFAULT_BINARY_OPERATOR’
 LIBMDA_CREATE_DEFAULT_BINARY_OPERATOR(op_add,+)
 ^
make: *** [gcc] Error 1
